// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TokiPonaQuiz.Data;

#nullable disable

namespace TokiPonaApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TokiPonaQuiz.Models.Sentence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("GermanSentence")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokiPonaSentence")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer");

                    b.Property<string>("WordPoolJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("Difficulty")
                        .HasDatabaseName("idx_sentences_difficulty");

                    b.HasIndex("UsageCount")
                        .HasDatabaseName("idx_sentences_usage");

                    b.HasIndex("Difficulty", "UsageCount")
                        .HasDatabaseName("idx_sentences_difficulty_usage");

                    b.ToTable("sentences", (string)null);
                });

            modelBuilder.Entity("TokiPonaQuiz.Models.UserStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Accuracy")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Accuracy")
                        .IsDescending()
                        .HasDatabaseName("idx_user_stats_accuracy");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("idx_user_stats_username");

                    b.ToTable("user_stats", (string)null);
                });

            modelBuilder.Entity("TokiPonaQuiz.Models.Vocabulary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("GermanTranslation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.PrimitiveCollection<string[]>("OptionsArray")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("options");

                    b.Property<string>("TokiPonaWord")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("OptionsArray")
                        .HasDatabaseName("idx_vocabularies_options_gin");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OptionsArray"), "gin");

                    b.HasIndex("TokiPonaWord")
                        .IsUnique()
                        .HasDatabaseName("idx_vocabularies_toki_pona_word");

                    b.ToTable("vocabularies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 30, 15, 2, 26, 422, DateTimeKind.Utc).AddTicks(5253),
                            GermanTranslation = "sprechen, Sprache",
                            OptionsArray = new[] { "sprechen", "essen", "gehen", "sehen" },
                            TokiPonaWord = "toki"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 30, 15, 2, 26, 422, DateTimeKind.Utc).AddTicks(6755),
                            GermanTranslation = "gut, einfach",
                            OptionsArray = new[] { "gut", "schlecht", "groß", "klein" },
                            TokiPonaWord = "pona"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 30, 15, 2, 26, 422, DateTimeKind.Utc).AddTicks(6757),
                            GermanTranslation = "Person, Mensch",
                            OptionsArray = new[] { "Person", "Tier", "Ding", "Ort" },
                            TokiPonaWord = "jan"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
